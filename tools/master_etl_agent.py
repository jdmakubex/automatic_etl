#!/usr/bin/env python3
"""
üéØ AGENTE MAESTRO ETL - INTEGRACI√ìN COMPLETA
Sistema final que coordina y ejecuta autom√°ticamente toda la inicializaci√≥n
del pipeline ETL sin intervenci√≥n manual
"""

import os
import sys
import json
import time
import logging
import subprocess
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any

# Importar nuestros m√≥dulos especializados
sys.path.append('/app/tools')

try:
    from health_validator import AdvancedHealthValidator
    from automatic_user_manager import AutomaticUserManager
    from superset_auto_configurator import SupersetAutoConfigurator
except ImportError as e:
    # Fallback si estamos ejecutando desde el host
    sys.path.append(os.path.join(os.path.dirname(__file__)))
    try:
        from health_validator import AdvancedHealthValidator
        from automatic_user_manager import AutomaticUserManager
        from superset_auto_configurator import SupersetAutoConfigurator
    except ImportError:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        sys.exit(1)

class MasterETLAgent:
    """Agente maestro que coordina toda la inicializaci√≥n autom√°tica"""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.start_time = datetime.now()
        self.execution_id = self.start_time.strftime('%Y%m%d_%H%M%S')
        
        # Inicializar componentes especializados
        self.health_validator = AdvancedHealthValidator()
        self.user_manager = AutomaticUserManager()
        self.superset_configurator = SupersetAutoConfigurator()
        
        # Estado del proceso
        self.results = {
            'execution_id': self.execution_id,
            'start_time': self.start_time.isoformat(),
            'phases': {},
            'overall_success': False,
            'duration_seconds': 0,
            'summary': {}
        }
        
    def _setup_logging(self) -> logging.Logger:
        """Configurar logging maestro con m√∫ltiples niveles"""
        logger = logging.getLogger('MasterETLAgent')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            # Handler para consola con formato visual
            console_handler = logging.StreamHandler()
            console_formatter = logging.Formatter(
                '%(asctime)s - üéØ MAESTRO - %(levelname)s - %(message)s'
            )
            console_handler.setFormatter(console_formatter)
            logger.addHandler(console_handler)
            
            # Handler para archivo (si es posible)
            try:
                log_dir = '/app/logs' if os.path.exists('/app/logs') else 'logs'
                os.makedirs(log_dir, exist_ok=True)
                
                file_handler = logging.FileHandler(f'{log_dir}/master_agent_{self.execution_id}.log')
                file_formatter = logging.Formatter(
                    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                )
                file_handler.setFormatter(file_formatter)
                logger.addHandler(file_handler)
            except Exception:
                pass  # No cr√≠tico
                
        return logger
    
    def _save_execution_results(self):
        """Guardar resultados detallados de la ejecuci√≥n"""
        try:
            results_dir = '/app/logs' if os.path.exists('/app/logs') else 'logs'
            os.makedirs(results_dir, exist_ok=True)
            
            results_file = f'{results_dir}/master_execution_{self.execution_id}.json'
            
            with open(results_file, 'w') as f:
                json.dump(self.results, f, indent=2, default=str)
            
            self.logger.info(f"üíæ Resultados guardados: {results_file}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  No se pudieron guardar resultados: {e}")
    
    def phase_1_validate_infrastructure(self) -> bool:
        """Fase 1: Validar infraestructura y servicios b√°sicos"""
        phase_start = datetime.now()
        self.logger.info("üè• === FASE 1: VALIDACI√ìN DE INFRAESTRUCTURA ===")
        
        try:
            success, health_results = self.health_validator.comprehensive_health_check()
            
            self.results['phases']['phase_1_infrastructure'] = {
                'name': 'Validaci√≥n de Infraestructura',
                'success': success,
                'duration_seconds': (datetime.now() - phase_start).total_seconds(),
                'details': health_results
            }
            
            if success:
                self.logger.info("‚úÖ FASE 1 COMPLETADA: Infraestructura operativa")
            else:
                self.logger.error("‚ùå FASE 1 FALL√ì: Problemas en infraestructura")
                self.logger.error(f"   Problemas cr√≠ticos: {len(health_results.get('critical_issues', []))}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en Fase 1: {str(e)}")
            self.results['phases']['phase_1_infrastructure'] = {
                'name': 'Validaci√≥n de Infraestructura',
                'success': False,
                'error': str(e),
                'duration_seconds': (datetime.now() - phase_start).total_seconds()
            }
            return False
    
    def phase_2_configure_users(self) -> bool:
        """Fase 2: Configurar usuarios y permisos autom√°ticamente"""
        phase_start = datetime.now()
        self.logger.info("üë• === FASE 2: CONFIGURACI√ìN AUTOM√ÅTICA DE USUARIOS ===")
        
        try:
            success, user_results = self.user_manager.comprehensive_user_setup()
            
            self.results['phases']['phase_2_users'] = {
                'name': 'Configuraci√≥n de Usuarios',
                'success': success,
                'duration_seconds': (datetime.now() - phase_start).total_seconds(),
                'details': user_results
            }
            
            if success:
                self.logger.info("‚úÖ FASE 2 COMPLETADA: Usuarios configurados")
                
                # Mostrar resumen de usuarios
                connectivity = user_results.get('connectivity_tests', {})
                successful_connections = sum(connectivity.values())
                total_connections = len(connectivity)
                self.logger.info(f"üîó Conectividad: {successful_connections}/{total_connections} usuarios")
                
            else:
                self.logger.error("‚ùå FASE 2 FALL√ì: Problemas configurando usuarios")
                all_issues = (user_results.get('mysql', {}).get('issues', []) + 
                             user_results.get('clickhouse', {}).get('issues', []) + 
                             user_results.get('superset', {}).get('issues', []))
                
                for issue in all_issues[:3]:
                    self.logger.error(f"   ‚Ä¢ {issue}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en Fase 2: {str(e)}")
            self.results['phases']['phase_2_users'] = {
                'name': 'Configuraci√≥n de Usuarios',
                'success': False,
                'error': str(e),
                'duration_seconds': (datetime.now() - phase_start).total_seconds()
            }
            return False
    
    def phase_3_configure_superset(self) -> bool:
        """Fase 3: Configurar Superset completamente"""
        phase_start = datetime.now()
        self.logger.info("üìä === FASE 3: CONFIGURACI√ìN COMPLETA DE SUPERSET ===")
        
        try:
            success, superset_results = self.superset_configurator.comprehensive_superset_setup()
            
            self.results['phases']['phase_3_superset'] = {
                'name': 'Configuraci√≥n de Superset',
                'success': success,
                'duration_seconds': (datetime.now() - phase_start).total_seconds(),
                'details': superset_results
            }
            
            if success:
                self.logger.info("‚úÖ FASE 3 COMPLETADA: Superset configurado")
                self.logger.info(f"üåê URL: {self.superset_configurator.superset_url}")
                self.logger.info(f"üë§ Admin: {self.superset_configurator.admin_config['username']}")
                self.logger.info(f"üìä Datasets: {len(superset_results.get('datasets_created', []))}")
            else:
                self.logger.error("‚ùå FASE 3 FALL√ì: Problemas configurando Superset")
                for issue in superset_results.get('issues', [])[:3]:
                    self.logger.error(f"   ‚Ä¢ {issue}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en Fase 3: {str(e)}")
            self.results['phases']['phase_3_superset'] = {
                'name': 'Configuraci√≥n de Superset',
                'success': False,
                'error': str(e),
                'duration_seconds': (datetime.now() - phase_start).total_seconds()
            }
            return False
    
    def phase_4_validate_etl_pipeline(self) -> bool:
        """Fase 4: Validar pipeline ETL completo"""
        phase_start = datetime.now()
        self.logger.info("‚ö° === FASE 4: VALIDACI√ìN DEL PIPELINE ETL ===")
        
        try:
            # Ejecutar validaci√≥n ETL completa
            self.logger.info("üîç Validando flujo MySQL ‚Üí Kafka ‚Üí ClickHouse...")
            validation_process = subprocess.run([
                'python3', 'tools/validate_etl_simple.py'
            ], capture_output=True, text=True, timeout=120)
            
            pipeline_success = validation_process.returncode == 0
            
            self.results['phases']['phase_4_pipeline'] = {
                'name': 'Validaci√≥n Pipeline ETL',
                'success': pipeline_success,
                'duration_seconds': (datetime.now() - phase_start).total_seconds(),
                'validation_output': validation_process.stdout if pipeline_success else validation_process.stderr
            }
            
            if pipeline_success:
                self.logger.info("‚úÖ FASE 4 COMPLETADA: Pipeline ETL operativo")
            else:
                self.logger.warning(f"‚ö†Ô∏è  Validaci√≥n ETL con advertencias: {validation_process.stderr}")
            
            return pipeline_success
            
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en Fase 4: {str(e)}")
            self.results['phases']['phase_4_pipeline'] = {
                'name': 'Validaci√≥n Pipeline ETL',
                'success': False,
                'error': str(e),
                'duration_seconds': (datetime.now() - phase_start).total_seconds()
            }
            return False
    
    def _validate_etl_flow(self) -> bool:
        """Validar flujo completo del pipeline ETL"""
        try:
            self.logger.info("üîç Validando flujo MySQL ‚Üí Kafka ‚Üí ClickHouse...")
            
            # Usar el validador existente
            try:
                result = subprocess.run([
                    'python3', '/app/tools/validate_etl_complete.py'
                ], capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    self.logger.info("‚úÖ Pipeline ETL validado exitosamente")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è  Validaci√≥n ETL con advertencias: {result.stderr}")
                    return True  # No es cr√≠tico para la automatizaci√≥n
                    
            except subprocess.TimeoutExpired:
                self.logger.warning("‚ö†Ô∏è  Timeout validando ETL")
                return True  # No es cr√≠tico
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Error validando ETL: {str(e)}")
                return True  # No es cr√≠tico
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en validaci√≥n ETL: {str(e)}")
            return False
    
    def generate_final_summary(self) -> Dict[str, Any]:
        """Generar resumen final completo"""
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        # Contar fases exitosas
        successful_phases = sum(1 for phase in self.results['phases'].values() if phase.get('success', False))
        total_phases = len(self.results['phases'])
        
        # Determinar √©xito general
        critical_phases_success = (
            self.results['phases'].get('phase_1_infrastructure', {}).get('success', False) and
            self.results['phases'].get('phase_2_users', {}).get('success', False)
        )
        
        superset_success = self.results['phases'].get('phase_3_superset', {}).get('success', False)
        
        if critical_phases_success and superset_success:
            overall_status = 'COMPLETAMENTE EXITOSO'
            status_emoji = 'üéâ'
        elif critical_phases_success:
            overall_status = 'MAYORMENTE EXITOSO'
            status_emoji = '‚úÖ'
        else:
            overall_status = 'PROBLEMAS CR√çTICOS'
            status_emoji = '‚ùå'
        
        summary = {
            'execution_id': self.execution_id,
            'overall_status': overall_status,
            'successful_phases': successful_phases,
            'total_phases': total_phases,
            'duration_seconds': total_duration,
            'duration_formatted': f"{total_duration//60:.0f}m {total_duration%60:.1f}s",
            'infrastructure_ok': self.results['phases'].get('phase_1_infrastructure', {}).get('success', False),
            'users_configured': self.results['phases'].get('phase_2_users', {}).get('success', False),
            'superset_configured': superset_success,
            'pipeline_validated': self.results['phases'].get('phase_4_pipeline', {}).get('success', False)
        }
        
        # Agregar informaci√≥n de acceso
        if superset_success:
            superset_details = self.results['phases']['phase_3_superset'].get('details', {})
            summary['superset_access'] = {
                'url': self.superset_configurator.superset_url,
                'username': self.superset_configurator.admin_config['username'],
                'password': self.superset_configurator.admin_config['password'],
                'database_id': superset_details.get('database_id'),
                'datasets_count': len(superset_details.get('datasets_created', []))
            }
        
        self.results['summary'] = summary
        self.results['end_time'] = end_time.isoformat()
        self.results['duration_seconds'] = total_duration
        self.results['overall_success'] = critical_phases_success
        
        return summary
    
    def display_final_report(self, summary: Dict[str, Any]):
        """Mostrar reporte final visual"""
        status_emoji = 'üéâ' if summary['overall_status'] == 'COMPLETAMENTE EXITOSO' else '‚úÖ' if 'EXITOSO' in summary['overall_status'] else '‚ùå'
        
        print("\n" + "="*80)
        print(f"{status_emoji} REPORTE FINAL - AGENTE MAESTRO ETL")
        print("="*80)
        print(f"üìÖ Ejecuci√≥n: {summary['execution_id']}")
        print(f"‚è±Ô∏è  Duraci√≥n: {summary['duration_formatted']}")
        print(f"üìä Estado: {summary['overall_status']}")
        print(f"‚úÖ Fases exitosas: {summary['successful_phases']}/{summary['total_phases']}")
        print()
        
        # Estado de componentes
        print("üèóÔ∏è  ESTADO DE COMPONENTES:")
        print(f"   üè• Infraestructura:  {'‚úÖ' if summary['infrastructure_ok'] else '‚ùå'}")
        print(f"   üë• Usuarios:         {'‚úÖ' if summary['users_configured'] else '‚ùå'}")  
        print(f"   üìä Superset:         {'‚úÖ' if summary['superset_configured'] else '‚ùå'}")
        print(f"   ‚ö° Pipeline ETL:     {'‚úÖ' if summary['pipeline_validated'] else '‚ö†Ô∏è '}")
        print()
        
        # Informaci√≥n de acceso
        if summary.get('superset_access'):
            access = summary['superset_access']
            print("üåê ACCESO A SUPERSET:")
            print(f"   URL:      {access['url']}")
            print(f"   Usuario:  {access['username']}")
            print(f"   Password: {access['password']}")
            print(f"   Datasets: {access['datasets_count']} configurados")
            print()
        
        # Pr√≥ximos pasos
        if summary['overall_status'] == 'COMPLETAMENTE EXITOSO':
            print("üéØ PR√ìXIMOS PASOS:")
            print("   1. Acceder a Superset para crear dashboards")
            print("   2. Configurar conectores Debezium si es necesario")
            print("   3. Monitorear el flujo de datos en tiempo real")
        elif 'EXITOSO' in summary['overall_status']:
            print("üîß ACCIONES RECOMENDADAS:")
            print("   1. Revisar logs para problemas menores")
            print("   2. Verificar configuraci√≥n de Superset manualmente")
            print("   3. Continuar con el monitoreo del pipeline")
        else:
            print("üö® ACCIONES REQUERIDAS:")
            print("   1. Revisar logs detallados de errores")
            print("   2. Verificar conectividad de servicios")
            print("   3. Re-ejecutar configuraci√≥n despu√©s de correcciones")
        
        print("="*80)
    
    def execute_complete_automation(self) -> bool:
        """Ejecutar automatizaci√≥n completa del pipeline ETL"""
        self.logger.info("üéØ === INICIANDO AUTOMATIZACI√ìN COMPLETA ETL ===")
        self.logger.info(f"üÜî ID de Ejecuci√≥n: {self.execution_id}")
        
        try:
            # Fase 1: Validar infraestructura
            phase1_success = self.phase_1_validate_infrastructure()
            if not phase1_success:
                self.logger.error("‚ùå Fallo cr√≠tico en Fase 1 - Abortando")
                return False
            
            # Breve pausa entre fases
            time.sleep(5)
            
            # Fase 2: Configurar usuarios
            phase2_success = self.phase_2_configure_users()
            if not phase2_success:
                # Verificar si al menos ClickHouse y Superset est√°n configurados
                user_details = self.results['phases']['phase_2_users'].get('details', {})
                connectivity = user_details.get('connectivity_tests', {})
                
                clickhouse_ok = any(k.startswith('clickhouse_') and v for k, v in connectivity.items())
                superset_ok = connectivity.get('superset_admin', False)
                
                if clickhouse_ok and superset_ok:
                    self.logger.warning("‚ö†Ô∏è  Fase 2 parcialmente exitosa - Continuando (ClickHouse y Superset funcionando)")
                else:
                    self.logger.error("‚ùå Fallo cr√≠tico en Fase 2 - Abortando")
                    return False
            
            # Pausa m√°s larga para que los servicios se estabilicen
            self.logger.info("‚è≥ Esperando estabilizaci√≥n de servicios...")
            time.sleep(15)
            
            # Fase 3: Configurar Superset
            phase3_success = self.phase_3_configure_superset()
            # Superset no es cr√≠tico para el pipeline b√°sico
            if not phase3_success:
                self.logger.warning("‚ö†Ô∏è  Problemas en Superset, pero continuando...")
            
            # Fase 4: Validar pipeline
            phase4_success = self.phase_4_validate_etl_pipeline()
            
            # Generar resumen final
            summary = self.generate_final_summary()
            
            # Guardar resultados
            self._save_execution_results()
            
            # Mostrar reporte
            self.display_final_report(summary)
            
            return summary['infrastructure_ok'] and summary['users_configured']
            
        except KeyboardInterrupt:
            self.logger.warning("‚ö†Ô∏è  Ejecuci√≥n interrumpida por el usuario")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en automatizaci√≥n: {str(e)}")
            return False


def main():
    """Funci√≥n principal del agente maestro"""
    print("\nüéØ AGENTE MAESTRO ETL - AUTOMATIZACI√ìN COMPLETA")
    print("Inicializando pipeline ETL sin intervenci√≥n manual...")
    print("="*60)
    
    try:
        # Crear y ejecutar agente maestro
        master_agent = MasterETLAgent()
        success = master_agent.execute_complete_automation()
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico del agente maestro: {str(e)}")
        return 1


if __name__ == "__main__":
    exit(main())