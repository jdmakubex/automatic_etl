#!/usr/bin/env python3
"""
Script para diagnosticar por qu√© Metabase no muestra datos aunque existan en ClickHouse.
Prueba diferentes tipos de consultas para identificar el problema.
"""
import os
import requests
from dotenv import load_dotenv
import json

load_dotenv('/app/.env')

METABASE_URL = os.getenv("METABASE_URL", "http://metabase:3000")
METABASE_ADMIN = os.getenv("METABASE_ADMIN", "admin@admin.com")
METABASE_PASSWORD = os.getenv("METABASE_PASSWORD", "Admin123!")

def login():
    """Autenticar en Metabase"""
    print("üîê Autenticando en Metabase...")
    resp = requests.post(f"{METABASE_URL}/api/session", 
                        json={"username": METABASE_ADMIN, "password": METABASE_PASSWORD})
    if resp.status_code == 200:
        session_id = resp.json()["id"]
        print("‚úÖ Autenticaci√≥n exitosa")
        return session_id
    else:
        print(f"‚ùå Error autenticaci√≥n: {resp.status_code} - {resp.text}")
        return None

def test_native_query(session_id, database_id, query, query_name):
    """Probar una consulta nativa en Metabase"""
    print(f"\nüîç Probando: {query_name}")
    print(f"   Query: {query}")
    
    headers = {"X-Metabase-Session": session_id}
    payload = {
        "type": "native",
        "native": {
            "query": query
        },
        "database": database_id
    }
    
    resp = requests.post(f"{METABASE_URL}/api/dataset", json=payload, headers=headers)
    
    if resp.status_code == 202:
        print("   ‚úÖ Consulta aceptada (202 - procesando)")
        
        # Obtener datos de la respuesta
        data = resp.json()
        if "data" in data and "rows" in data["data"]:
            rows = data["data"]["rows"]
            cols = data["data"]["cols"]
            
            print(f"   üìä Columnas: {len(cols)}")
            for col in cols[:3]:  # Mostrar primeras 3 columnas
                print(f"      - {col['name']} ({col['base_type']})")
            
            print(f"   üìã Filas: {len(rows)}")
            for i, row in enumerate(rows[:3]):  # Mostrar primeras 3 filas
                print(f"      {i+1}. {row}")
                
            if len(rows) == 0:
                print("   ‚ö†Ô∏è  SIN DATOS: La consulta no devolvi√≥ filas")
            
            return len(rows) > 0
        else:
            print("   ‚ö†Ô∏è  Sin datos en la respuesta")
            return False
            
    elif resp.status_code == 200:
        print("   ‚úÖ Consulta exitosa (200)")
        # Similar manejo para 200
        return True
    else:
        print(f"   ‚ùå Error: {resp.status_code}")
        print(f"      {resp.text[:300]}")
        return False

def get_database_metadata(session_id, database_id):
    """Obtener metadata de la base de datos"""
    print(f"\nüóÑÔ∏è  Obteniendo metadata de base ID: {database_id}")
    headers = {"X-Metabase-Session": session_id}
    
    resp = requests.get(f"{METABASE_URL}/api/database/{database_id}/metadata", headers=headers)
    if resp.status_code == 200:
        metadata = resp.json()
        tables = metadata.get("tables", [])
        print(f"   üìä Tablas detectadas: {len(tables)}")
        
        tables_with_data = 0
        for table in tables[:10]:  # Mostrar primeras 10
            table_name = table.get("name", "unknown")
            row_count = table.get("rows")
            schema = table.get("schema", "default")
            
            if row_count and row_count > 0:
                tables_with_data += 1
                print(f"   ‚úÖ {schema}.{table_name}: {row_count:,} filas")
            else:
                print(f"   ‚ö†Ô∏è  {schema}.{table_name}: Sin datos detectados")
        
        print(f"   üìà Tablas con datos seg√∫n Metabase: {tables_with_data}/{len(tables)}")
        return metadata
    else:
        print(f"   ‚ùå Error obteniendo metadata: {resp.status_code}")
        return None

def force_sync_database(session_id, database_id):
    """Forzar sincronizaci√≥n de la base de datos"""
    print(f"\nüîÑ Forzando sincronizaci√≥n de base ID: {database_id}")
    headers = {"X-Metabase-Session": session_id}
    
    # Sincronizaci√≥n de esquemas
    resp = requests.post(f"{METABASE_URL}/api/database/{database_id}/sync_schema", headers=headers)
    if resp.status_code == 200:
        print("   ‚úÖ Sincronizaci√≥n de esquemas iniciada")
    else:
        print(f"   ‚ö†Ô∏è  Sincronizaci√≥n esquemas: {resp.status_code}")
    
    # Re-escaneo de valores
    resp2 = requests.post(f"{METABASE_URL}/api/database/{database_id}/rescan_values", headers=headers)
    if resp2.status_code == 200:
        print("   ‚úÖ Re-escaneo de valores iniciado")
    else:
        print(f"   ‚ö†Ô∏è  Re-escaneo valores: {resp2.status_code}")

def main():
    print("üîç DIAGN√ìSTICO DE VISUALIZACI√ìN DE DATOS EN METABASE")
    print("=" * 60)
    
    # Autenticar
    session_id = login()
    if not session_id:
        return
    
    # ID de la base ClickHouse (seg√∫n configurador din√°mico)
    database_id = 2
    
    # 1. Obtener metadata actual
    metadata = get_database_metadata(session_id, database_id)
    
    # 2. Forzar sincronizaci√≥n
    force_sync_database(session_id, database_id)
    
    print("\n‚è≥ Esperando 10 segundos para que termine la sincronizaci√≥n...")
    import time
    time.sleep(10)
    
    # 3. Probar consultas espec√≠ficas que sabemos tienen datos
    test_queries = [
        ("SELECT COUNT(*) as total FROM fgeo_analytics.test_table", "Conteo test_table"),
        ("SELECT * FROM fgeo_analytics.test_table LIMIT 3", "Muestra test_table"),
        ("SELECT COUNT(*) as total FROM fgeo_analytics.archivos_archivos_raw", "Conteo archivos"),
        ("SELECT * FROM fgeo_analytics.archivos_archivos_raw LIMIT 2", "Muestra archivos"),
        ("SELECT COUNT(*) as total FROM fgeo_analytics.fiscalizacion_altoimpacto_raw", "Conteo fiscalizaci√≥n"),
        ("SELECT * FROM fgeo_analytics.fiscalizacion_altoimpacto_raw LIMIT 2", "Muestra fiscalizaci√≥n"),
    ]
    
    successful_queries = 0
    queries_with_data = 0
    
    for query, name in test_queries:
        has_data = test_native_query(session_id, database_id, query, name)
        successful_queries += 1
        if has_data:
            queries_with_data += 1
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DEL DIAGN√ìSTICO:")
    print(f"   ‚úÖ Consultas ejecutadas: {successful_queries}")
    print(f"   üìã Consultas con datos: {queries_with_data}")
    print(f"   üéØ Tasa de √©xito: {queries_with_data/successful_queries*100:.1f}%")
    
    if queries_with_data == 0:
        print("\nüö® PROBLEMA IDENTIFICADO:")
        print("   Las consultas se ejecutan pero no devuelven datos")
        print("   Posibles causas:")
        print("   - Problema de permisos de usuario ClickHouse")
        print("   - Schema cache desactualizado en Metabase")
        print("   - Configuraci√≥n incorrecta de la conexi√≥n")
        
    elif queries_with_data < successful_queries:
        print("\n‚ö†Ô∏è  PROBLEMA PARCIAL:")
        print("   Algunas consultas devuelven datos, otras no")
        print("   Revisar sincronizaci√≥n de schema espec√≠ficas")
        
    else:
        print("\nüéâ ¬°TODO FUNCIONA CORRECTAMENTE!")
        print("   El problema puede estar en la UI de Metabase")
        print("   Intenta refrescar el navegador o limpiar cache")

if __name__ == "__main__":
    main()