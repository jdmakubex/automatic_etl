#!/usr/bin/env python3
"""
üéØ ORQUESTADOR AUTOM√ÅTICO DEL PIPELINE ETL
Script maestro que ejecuta TODA la inicializaci√≥n autom√°tica:

FASE 1: LIMPIEZA COMPLETA
- Elimina conectores, t√≥picos, tablas existentes
- Limpia configuraciones previas

FASE 2: CONFIGURACI√ìN DE USUARIOS
- Crea usuarios MySQL con permisos de replicaci√≥n
- Configura usuarios ClickHouse con permisos de escritura
- Valida conectividad

FASE 3: DESCUBRIMIENTO DE ESQUEMAS
- Detecta autom√°ticamente tablas en MySQL
- Genera configuraciones de conectores
- Crea esquemas ClickHouse optimizados

FASE 4: DESPLIEGUE DE INFRAESTRUCTURA
- Aplica conectores Debezium
- Crea tablas en ClickHouse
- Inicia flujo de datos

FASE 5: VALIDACI√ìN COMPLETA
- Verifica flujo MySQL ‚Üí Kafka ‚Üí ClickHouse
- Confirma datos en destino
- Reporta estado final

Este script se ejecuta autom√°ticamente al levantar Docker Compose.
"""

import subprocess
import time
import json
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any

# Configurar logging centralizado
class ColoredFormatter(logging.Formatter):
    """Formatter con colores para diferentes niveles de log"""
    
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset_color = self.COLORS['RESET']
        
        # Formato con color
        formatter = logging.Formatter(
            f'{log_color}%(asctime)s - %(name)s - %(levelname)s{reset_color} - %(message)s'
        )
        return formatter.format(record)

# Configurar logging
def setup_logging():
    """Configurar sistema de logging completo"""
    # Detectar si estamos en contenedor Docker
    in_docker = os.path.exists('/.dockerenv') or os.environ.get('RUNNING_IN_DOCKER') == '1'
    log_dir = '/app/logs' if in_docker else './logs'
    os.makedirs(log_dir, exist_ok=True)
    
    # Logger principal
    logger = logging.getLogger('ETL_ORCHESTRATOR')
    logger.setLevel(logging.INFO)
    
    # Handler para archivo
    file_handler = logging.FileHandler(f'{log_dir}/orchestrator.log')
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    file_handler.setFormatter(file_formatter)
    
    # Handler para consola con colores
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(ColoredFormatter())
    
    # Agregar handlers
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

logger = setup_logging()

class ETLOrchestrator:
    def __init__(self):
        self.start_time = datetime.now()
        self.phases = []
        self.current_phase = None
        
        # Configuraci√≥n de fases
        self.phase_config = {
            'pipeline_gen': {
                'name': 'üèóÔ∏è GENERACI√ìN DE PIPELINE',
                'script': 'gen_pipeline.py',
                'description': 'Generar configuraciones de conectores y esquemas',
                'required': True,
                'timeout': 120
            },
            'connectors': {
                'name': 'üîå DESPLIEGUE DE CONECTORES',
                'script': 'apply_connectors_auto.py',
                'description': 'Aplicar conectores Debezium autom√°ticamente',
                'required': True,
                'timeout': 180
            },
            'validation': {
                'name': '‚úÖ VALIDACI√ìN COMPLETA',
                'script': 'pipeline_status.py',
                'description': 'Verificar flujo completo de datos',
                'required': False,  # No cr√≠tico - permite continuar aunque falle
                'timeout': 60
            }
        }
        
        # Estado del orquestador
        self.status = {
            'start_time': self.start_time.isoformat(),
            'phases_completed': 0,
            'phases_total': len(self.phase_config),
            'current_phase': None,
            'success': False,
            'errors': [],
            'execution_time': 0
        }
    
    def wait_for_services(self) -> bool:
        """Esperar a que todos los servicios est√©n disponibles"""
        logger.info("‚è≥ Esperando servicios cr√≠ticos...")
        
        services = {
            'connect': 'curl -s http://connect:8083/ -m 5',
            'clickhouse': 'curl -s http://clickhouse:8123/ping -m 5'
        }
        
        max_wait = 180  # 3 minutos m√°ximo
        start_wait = time.time()
        
        for service_name, check_cmd in services.items():
            logger.info(f"üîç Verificando servicio: {service_name}")
            service_ready = False
            service_wait_start = time.time()
            
            while not service_ready and (time.time() - start_wait) < max_wait:
                try:
                    result = subprocess.run(
                        check_cmd,
                        shell=True,
                        capture_output=True,
                        text=True,
                        timeout=10
                    )
                    
                    if result.returncode == 0:
                        logger.info(f"‚úÖ Servicio {service_name} disponible")
                        service_ready = True
                    else:
                        elapsed = time.time() - service_wait_start
                        logger.debug(f"‚è≥ Esperando {service_name}... ({elapsed:.1f}s)")
                        time.sleep(5)
                        
                except subprocess.TimeoutExpired:
                    logger.debug(f"‚è≥ Timeout verificando {service_name}, reintentando...")
                    time.sleep(5)
                except Exception as e:
                    logger.debug(f"‚è≥ Error verificando {service_name}: {str(e)}")
                    time.sleep(5)
                    
            if not service_ready:
                logger.error(f"‚ùå Servicio {service_name} no disponible despu√©s de {max_wait}s")
                return False
                
        # Verificar que el directorio /app/generated existe y est√° accesible
        logger.info("üîç Verificando acceso a directorios de trabajo...")
        if not os.path.exists('/app/generated'):
            logger.info("üìÅ Creando directorio /app/generated...")
            os.makedirs('/app/generated/default', exist_ok=True)
            
        # Verificar acceso a herramientas
        tools_dir = '/app/tools'
        if not os.path.exists(tools_dir):
            logger.error(f"‚ùå Directorio de herramientas no encontrado: {tools_dir}")
            return False
            
        total_wait = time.time() - start_wait
        logger.info(f"‚úÖ Servicios cr√≠ticos disponibles ({total_wait:.1f}s)")
        return True
    
    def execute_phase(self, phase_key: str) -> bool:
        """Ejecutar una fase espec√≠fica"""
        phase = self.phase_config[phase_key]
        self.current_phase = phase_key
        self.status['current_phase'] = phase['name']
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üöÄ INICIANDO FASE: {phase['name']}")
        logger.info(f"üìã Descripci√≥n: {phase['description']}")
        logger.info(f"üîß Script: {phase['script']}")
        logger.info(f"{'='*80}")
        
        phase_start = time.time()
        
        try:
            # Construir comando
            cmd = f"cd /app && python3 tools/{phase['script']}"
            
            logger.info(f"‚ñ∂Ô∏è  Ejecutando: {cmd}")
            
            # Ejecutar con timeout
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True,
                timeout=phase['timeout']
            )
            
            phase_duration = time.time() - phase_start
            
            # Procesar resultado
            if result.returncode == 0:
                logger.info(f"‚úÖ FASE COMPLETADA: {phase['name']} ({phase_duration:.1f}s)")
                
                # Log output si hay contenido relevante
                if result.stdout.strip():
                    logger.debug("üì§ Salida del script:")
                    for line in result.stdout.strip().split('\n')[-10:]:  # √öltimas 10 l√≠neas
                        logger.debug(f"   {line}")
                
                self.status['phases_completed'] += 1
                return True
                
            else:
                logger.error(f"‚ùå FASE FALL√ì: {phase['name']} (c√≥digo: {result.returncode})")
                
                # Log error output
                if result.stderr.strip():
                    logger.error("üì§ Error del script:")
                    for line in result.stderr.strip().split('\n')[-10:]:
                        logger.error(f"   {line}")
                
                error_info = {
                    'phase': phase['name'],
                    'script': phase['script'],
                    'return_code': result.returncode,
                    'error': result.stderr.strip()[-500:] if result.stderr.strip() else 'No error output',
                    'duration': phase_duration
                }
                self.status['errors'].append(error_info)
                
                return not phase['required']  # Si no es requerida, continuar
        
        except subprocess.TimeoutExpired:
            phase_duration = time.time() - phase_start
            logger.error(f"‚è∞ FASE TIMEOUT: {phase['name']} ({phase['timeout']}s)")
            
            error_info = {
                'phase': phase['name'],
                'script': phase['script'],
                'error': f'Timeout despu√©s de {phase["timeout"]}s',
                'duration': phase_duration
            }
            self.status['errors'].append(error_info)
            
            return not phase['required']
            
        except Exception as e:
            phase_duration = time.time() - phase_start
            logger.error(f"üí• FASE ERROR: {phase['name']} - {str(e)}")
            
            error_info = {
                'phase': phase['name'],
                'script': phase['script'],
                'error': str(e),
                'duration': phase_duration
            }
            self.status['errors'].append(error_info)
            
            return not phase['required']
    
    def save_execution_log(self):
        """Guardar log completo de ejecuci√≥n"""
        try:
            self.status['end_time'] = datetime.now().isoformat()
            self.status['execution_time'] = (datetime.now() - self.start_time).total_seconds()
            
            log_file = f"/app/logs/orchestrator_execution_{self.start_time.strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(log_file, 'w') as f:
                json.dump(self.status, f, indent=2)
            
            logger.info(f"üíæ Log de ejecuci√≥n guardado: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando log de ejecuci√≥n: {str(e)}")
    
    def print_final_summary(self):
        """Imprimir resumen final de la ejecuci√≥n"""
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        print(f"\n{'='*80}")
        print(f"üèÅ RESUMEN FINAL DE INICIALIZACI√ìN AUTOM√ÅTICA")
        print(f"{'='*80}")
        print(f"‚è∞ Inicio: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è∞ Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è  Duraci√≥n total: {total_duration:.1f} segundos")
        print(f"üìä Fases completadas: {self.status['phases_completed']}/{self.status['phases_total']}")
        
        if self.status['success']:
            print(f"\nüéâ INICIALIZACI√ìN EXITOSA")
            print(f"‚úÖ Pipeline ETL completamente funcional")
            print(f"üöÄ Sistema listo para operaci√≥n")
        else:
            print(f"\n‚ö†Ô∏è  INICIALIZACI√ìN PARCIAL O FALLIDA")
            print(f"‚ùå {len(self.status['errors'])} errores encontrados")
            
            if self.status['errors']:
                print(f"\nüîç ERRORES DETALLADOS:")
                for i, error in enumerate(self.status['errors'], 1):
                    print(f"   {i}. {error['phase']}: {error['error'][:100]}...")
        
        print(f"\nüí° PR√ìXIMOS PASOS:")
        if self.status['success']:
            print(f"   1. Verificar datos: python3 tools/pipeline_status.py")
            print(f"   2. Configurar Superset para visualizaci√≥n")
            print(f"   3. Configurar monitoreo y alertas")
        else:
            print(f"   1. Revisar logs detallados en /app/logs/")
            print(f"   2. Corregir errores encontrados")
            print(f"   3. Re-ejecutar inicializaci√≥n")
        
        print(f"{'='*80}")
    
    def run_full_initialization(self) -> bool:
        """Ejecutar inicializaci√≥n completa del pipeline ETL"""
        logger.info("üéØ === INICIANDO ORQUESTACI√ìN AUTOM√ÅTICA DEL PIPELINE ETL ===")
        logger.info(f"‚è∞ Tiempo de inicio: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üìã Fases programadas: {len(self.phase_config)}")
        
        try:
            # 1. Esperar servicios
            if not self.wait_for_services():
                logger.error("‚ùå Servicios no disponibles, abortando inicializaci√≥n")
                return False
            
            # 2. Ejecutar fases en orden
            phases_order = ['pipeline_gen', 'connectors', 'validation']
            
            for phase_key in phases_order:
                if not self.execute_phase(phase_key):
                    if self.phase_config[phase_key]['required']:
                        logger.error(f"‚ùå Fase requerida fall√≥: {phase_key}, abortando")
                        self.status['success'] = False
                        return False
                    else:
                        logger.warning(f"‚ö†Ô∏è  Fase opcional fall√≥: {phase_key}, continuando")
            
            # 3. √âxito completo
            self.status['success'] = True
            logger.info("üéâ TODAS LAS FASES COMPLETADAS EXITOSAMENTE")
            return True
            
        except Exception as e:
            logger.error(f"üí• Error cr√≠tico en orquestaci√≥n: {str(e)}")
            self.status['success'] = False
            return False
        
        finally:
            # Siempre guardar log y mostrar resumen
            self.save_execution_log()
            self.print_final_summary()

def main():
    """Funci√≥n principal"""
    try:
        # Banner de inicio
        print(f"\n{'='*80}")
        print(f"üéØ ORQUESTADOR AUTOM√ÅTICO DEL PIPELINE ETL")
        print(f"üöÄ Inicializaci√≥n completa desde cero")
        print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*80}")
        
        orchestrator = ETLOrchestrator()
        success = orchestrator.run_full_initialization()
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        logger.info("üõë Orquestaci√≥n interrumpida por el usuario")
        return 1
    except Exception as e:
        logger.error(f"üí• Error cr√≠tico en main: {str(e)}")
        return 1

if __name__ == "__main__":
    exit(main())